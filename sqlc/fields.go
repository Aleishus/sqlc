// THIS FILE WAS AUTOGENERATED - ANY EDITS TO THIS WILL BE LOST WHEN IT IS REGENERATED

package sqlc

import (
	"time"
)

type InsertSetStep interface {
	
 	SetString(StringField, string) InsertSetMoreStep
 	
 	SetInt(IntField, int) InsertSetMoreStep
 	
 	SetInt64(Int64Field, int64) InsertSetMoreStep
 	
 	SetTime(TimeField, time.Time) InsertSetMoreStep
 	
}

type UpdateSetStep interface {
	
 	SetString(StringField, string) UpdateSetMoreStep
 	
 	SetInt(IntField, int) UpdateSetMoreStep
 	
 	SetInt64(Int64Field, int64) UpdateSetMoreStep
 	
 	SetTime(TimeField, time.Time) UpdateSetMoreStep
 	
}


func (i *insert) SetString(f StringField, v string) InsertSetMoreStep {
	return i.set(f,v)
}

func (i *insert) SetInt(f IntField, v int) InsertSetMoreStep {
	return i.set(f,v)
}

func (i *insert) SetInt64(f Int64Field, v int64) InsertSetMoreStep {
	return i.set(f,v)
}

func (i *insert) SetTime(f TimeField, v time.Time) InsertSetMoreStep {
	return i.set(f,v)
}



func (u *update) SetString(f StringField, v string) UpdateSetMoreStep {
	return u.set(f,v)
}

func (u *update) SetInt(f IntField, v int) UpdateSetMoreStep {
	return u.set(f,v)
}

func (u *update) SetInt64(f Int64Field, v int64) UpdateSetMoreStep {
	return u.set(f,v)
}

func (u *update) SetTime(f TimeField, v time.Time) UpdateSetMoreStep {
	return u.set(f,v)
}


/////

type Reflectable interface {

	StringField(name string) StringField

	IntField(name string) IntField

	Int64Field(name string) Int64Field

	TimeField(name string) TimeField

}


func (s *selection) StringField(name string) StringField {
	return &stringField{name: name}
}
func (t table) StringField(name string) StringField {
	return &stringField{name: name, table: t}
}

func (s *selection) IntField(name string) IntField {
	return &intField{name: name}
}
func (t table) IntField(name string) IntField {
	return &intField{name: name, table: t}
}

func (s *selection) Int64Field(name string) Int64Field {
	return &int64Field{name: name}
}
func (t table) Int64Field(name string) Int64Field {
	return &int64Field{name: name, table: t}
}

func (s *selection) TimeField(name string) TimeField {
	return &timeField{name: name}
}
func (t table) TimeField(name string) TimeField {
	return &timeField{name: name, table: t}
}


/////



type stringField struct {
	name string
	table Selectable
	fun Function
	alias string
}

type StringField interface {
	TableField
	Eq(value string) Condition
	IsEq(value StringField) JoinCondition
}


func (c *stringField) Function() Function {
	return c.fun
}

func (c *stringField) fct(f Function) Field {
	return &stringField{
		name:  c.name,
		table: c.table,
		fun:   f,
	}
}

func (c *stringField) As(alias string) Field {
	return &stringField{name: c.name, table: c.table, fun: c.fun, alias: alias}
}

func (c *stringField) Alias() string {
	return c.alias
}

func (c *stringField) MaybeAlias() string {
	if c.alias == "" {
		return c.name
	} else {
		return c.alias
	}
}

func (c *stringField) Name() string {
	return c.name
}

func (c *stringField) Parent() Selectable {
	return c.table
}

func (c *stringField) Eq(pred string) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}}
}

func (c *stringField) IsEq(pred StringField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: EqPredicate}
}

func String(table Selectable, name string) StringField {
	return &stringField{name: name, table:table}
}

//////

func (c *stringField) Avg() Field {	
	return c.fct(Avg)
}

func (c *stringField) Max() Field {	
	return c.fct(Max)
}

func (c *stringField) Min() Field {
	return c.fct(Min)
}



type intField struct {
	name string
	table Selectable
	fun Function
	alias string
}

type IntField interface {
	TableField
	Eq(value int) Condition
	IsEq(value IntField) JoinCondition
}


func (c *intField) Function() Function {
	return c.fun
}

func (c *intField) fct(f Function) Field {
	return &intField{
		name:  c.name,
		table: c.table,
		fun:   f,
	}
}

func (c *intField) As(alias string) Field {
	return &intField{name: c.name, table: c.table, fun: c.fun, alias: alias}
}

func (c *intField) Alias() string {
	return c.alias
}

func (c *intField) MaybeAlias() string {
	if c.alias == "" {
		return c.name
	} else {
		return c.alias
	}
}

func (c *intField) Name() string {
	return c.name
}

func (c *intField) Parent() Selectable {
	return c.table
}

func (c *intField) Eq(pred int) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}}
}

func (c *intField) IsEq(pred IntField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: EqPredicate}
}

func Int(table Selectable, name string) IntField {
	return &intField{name: name, table:table}
}

//////

func (c *intField) Avg() Field {	
	return c.fct(Avg)
}

func (c *intField) Max() Field {	
	return c.fct(Max)
}

func (c *intField) Min() Field {
	return c.fct(Min)
}



type int64Field struct {
	name string
	table Selectable
	fun Function
	alias string
}

type Int64Field interface {
	TableField
	Eq(value int64) Condition
	IsEq(value Int64Field) JoinCondition
}


func (c *int64Field) Function() Function {
	return c.fun
}

func (c *int64Field) fct(f Function) Field {
	return &int64Field{
		name:  c.name,
		table: c.table,
		fun:   f,
	}
}

func (c *int64Field) As(alias string) Field {
	return &int64Field{name: c.name, table: c.table, fun: c.fun, alias: alias}
}

func (c *int64Field) Alias() string {
	return c.alias
}

func (c *int64Field) MaybeAlias() string {
	if c.alias == "" {
		return c.name
	} else {
		return c.alias
	}
}

func (c *int64Field) Name() string {
	return c.name
}

func (c *int64Field) Parent() Selectable {
	return c.table
}

func (c *int64Field) Eq(pred int64) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}}
}

func (c *int64Field) IsEq(pred Int64Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: EqPredicate}
}

func Int64(table Selectable, name string) Int64Field {
	return &int64Field{name: name, table:table}
}

//////

func (c *int64Field) Avg() Field {	
	return c.fct(Avg)
}

func (c *int64Field) Max() Field {	
	return c.fct(Max)
}

func (c *int64Field) Min() Field {
	return c.fct(Min)
}



type timeField struct {
	name string
	table Selectable
	fun Function
	alias string
}

type TimeField interface {
	TableField
	Eq(value time.Time) Condition
	IsEq(value TimeField) JoinCondition
}


func (c *timeField) Function() Function {
	return c.fun
}

func (c *timeField) fct(f Function) Field {
	return &timeField{
		name:  c.name,
		table: c.table,
		fun:   f,
	}
}

func (c *timeField) As(alias string) Field {
	return &timeField{name: c.name, table: c.table, fun: c.fun, alias: alias}
}

func (c *timeField) Alias() string {
	return c.alias
}

func (c *timeField) MaybeAlias() string {
	if c.alias == "" {
		return c.name
	} else {
		return c.alias
	}
}

func (c *timeField) Name() string {
	return c.name
}

func (c *timeField) Parent() Selectable {
	return c.table
}

func (c *timeField) Eq(pred time.Time) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}}
}

func (c *timeField) IsEq(pred TimeField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: EqPredicate}
}

func Time(table Selectable, name string) TimeField {
	return &timeField{name: name, table:table}
}

//////

func (c *timeField) Avg() Field {	
	return c.fct(Avg)
}

func (c *timeField) Max() Field {	
	return c.fct(Max)
}

func (c *timeField) Min() Field {
	return c.fct(Min)
}

