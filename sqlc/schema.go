package sqlc

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

func sqlc_tmpl_fields_tmpl() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0xbc, 0x95,
		0xdf, 0x6f, 0x9b, 0x30, 0x10, 0xc7, 0x9f, 0xf1, 0x5f, 0x71, 0xaa, 0xa2,
		0x09, 0x22, 0x96, 0xbc, 0x23, 0xed, 0x21, 0x5d, 0xc9, 0xca, 0x44, 0x92,
		0x29, 0xd0, 0x45, 0x7b, 0x9a, 0x18, 0x98, 0xcc, 0x6a, 0x62, 0x28, 0x98,
		0xac, 0x13, 0xca, 0xff, 0xbe, 0xb3, 0x1d, 0x01, 0xf9, 0x51, 0x94, 0x68,
		0x52, 0xfb, 0x40, 0xed, 0xe3, 0xfc, 0xbd, 0xcf, 0x9d, 0xef, 0xc8, 0x78,
		0x0c, 0xe1, 0xa3, 0x17, 0xc0, 0xd4, 0xf3, 0x5d, 0x58, 0x4d, 0x02, 0x98,
		0x3c, 0x85, 0x8b, 0x2f, 0xee, 0xdc, 0x5d, 0x4e, 0x42, 0xf7, 0x01, 0x3e,
		0xc2, 0x64, 0xfe, 0x03, 0xdc, 0x07, 0x2f, 0x0c, 0x20, 0x5c, 0x68, 0xd7,
		0x95, 0xe7, 0xfb, 0x70, 0xef, 0x82, 0xbf, 0x08, 0x42, 0x58, 0x3d, 0xba,
		0x73, 0xf0, 0x42, 0x40, 0xfb, 0xd2, 0x6d, 0xce, 0x11, 0x92, 0x47, 0xf1,
		0x73, 0xb4, 0xa6, 0x50, 0xbe, 0x6c, 0x62, 0x42, 0xd8, 0x36, 0xcf, 0x0a,
		0x01, 0x26, 0x31, 0xee, 0x04, 0xdb, 0xd2, 0x3b, 0x62, 0x11, 0x22, 0xfe,
		0xe6, 0x14, 0x3c, 0x5e, 0xd2, 0x42, 0x04, 0x54, 0x04, 0x82, 0xe6, 0xc0,
		0xb8, 0xa0, 0x45, 0x1a, 0xc5, 0x14, 0x6a, 0x62, 0xd4, 0x35, 0x14, 0x11,
		0x47, 0x89, 0xc1, 0x4f, 0x1b, 0x06, 0x02, 0x9c, 0x4f, 0x30, 0x92, 0x67,
		0x4a, 0xd8, 0xef, 0x09, 0x18, 0x78, 0x06, 0x3d, 0x06, 0x62, 0xf4, 0xad,
		0xa0, 0x29, 0x7b, 0x45, 0xa3, 0x79, 0xb2, 0x9f, 0x32, 0xba, 0x49, 0x6c,
		0xd0, 0x56, 0x9f, 0xa1, 0x74, 0xb4, 0x41, 0xb3, 0xd5, 0x06, 0x9d, 0x65,
		0x05, 0x95, 0x81, 0x51, 0x0e, 0xbd, 0x28, 0x4f, 0xa4, 0xf4, 0xfe, 0x80,
		0xf6, 0x94, 0x27, 0x91, 0xa0, 0xef, 0x8c, 0xd6, 0x04, 0x7d, 0x0b, 0xad,
		0x37, 0x74, 0x5a, 0xf1, 0x18, 0x4c, 0x06, 0x43, 0xa6, 0x32, 0xb4, 0xe0,
		0x02, 0x49, 0x0a, 0x97, 0x59, 0x76, 0xd7, 0x14, 0x4a, 0x26, 0x5f, 0x50,
		0x51, 0x15, 0x1c, 0xd8, 0xa8, 0xa4, 0xc2, 0x4c, 0xed, 0x9d, 0x85, 0x58,
		0x2d, 0xe2, 0x35, 0x80, 0x15, 0x0c, 0x2b, 0x95, 0xe7, 0x7f, 0x03, 0x9e,
		0x95, 0xab, 0x03, 0x58, 0xbd, 0x01, 0xd8, 0x4f, 0xa8, 0xef, 0x1e, 0x5d,
		0x44, 0xe6, 0x67, 0x7f, 0x68, 0x71, 0x4e, 0x02, 0xa5, 0x28, 0xaa, 0x58,
		0xc8, 0x48, 0x3c, 0xda, 0x52, 0xb9, 0x65, 0x7c, 0x4d, 0x0c, 0x11, 0xfd,
		0xda, 0x50, 0x08, 0xe5, 0xd3, 0x67, 0xcf, 0x94, 0x18, 0x98, 0x2c, 0x4c,
		0x31, 0x61, 0xc1, 0x32, 0x4e, 0x3a, 0xca, 0xe7, 0x8a, 0x47, 0xcd, 0xa5,
		0x14, 0x94, 0x9d, 0x18, 0xee, 0x8b, 0xb9, 0x8b, 0x36, 0x15, 0xbd, 0x90,
		0xfa, 0xe7, 0x8c, 0x27, 0x4c, 0x49, 0x1b, 0x5e, 0x79, 0xe2, 0x77, 0x2c,
		0x6f, 0xc1, 0xd7, 0x8c, 0xf1, 0xd6, 0x5f, 0xd6, 0x40, 0x5f, 0x44, 0x0c,
		0xc3, 0xbe, 0x4c, 0xad, 0x06, 0xdf, 0x6c, 0x97, 0x9d, 0x0a, 0xc7, 0x23,
		0x94, 0x91, 0x72, 0x57, 0xaa, 0xa5, 0x31, 0xde, 0x47, 0x23, 0x84, 0x92,
		0x2a, 0xf9, 0x56, 0xef, 0x43, 0xdf, 0x71, 0x74, 0x53, 0xf5, 0x76, 0x00,
		0xe3, 0xca, 0x85, 0x8d, 0x06, 0x55, 0x73, 0x07, 0x0d, 0x6a, 0x21, 0x2d,
		0x88, 0x82, 0x1e, 0x90, 0xe2, 0x7a, 0x7f, 0x03, 0xda, 0x1c, 0x05, 0x31,
		0x49, 0x7d, 0x97, 0x47, 0x29, 0xca, 0x50, 0x37, 0x08, 0xa9, 0xdb, 0xbb,
		0xac, 0xa4, 0x18, 0x47, 0x3a, 0xd2, 0x0d, 0x8a, 0x78, 0xb7, 0x79, 0x41,
		0x93, 0xbe, 0x16, 0xe8, 0x84, 0x69, 0x6c, 0xf5, 0x3d, 0xc3, 0x15, 0x5f,
		0x3b, 0xba, 0xcc, 0x87, 0x5d, 0xfd, 0x5d, 0xb6, 0x89, 0x03, 0x52, 0xd1,
		0xd6, 0x6f, 0xb0, 0x7c, 0xfb, 0x5b, 0x4a, 0xa5, 0xba, 0xad, 0x43, 0xd4,
		0xdb, 0x6c, 0x1d, 0xb2, 0x23, 0x7b, 0xed, 0xff, 0x2e, 0x31, 0xb0, 0x0d,
		0x4b, 0xf9, 0x5f, 0xd3, 0xa0, 0x50, 0xc2, 0x62, 0x9c, 0x67, 0x07, 0x73,
		0x6e, 0x36, 0x2d, 0xda, 0xe9, 0x87, 0xe2, 0x64, 0xe0, 0x6c, 0xe8, 0x8c,
		0xa3, 0x75, 0x79, 0xd0, 0xae, 0xed, 0x35, 0xdd, 0x68, 0xaa, 0xcb, 0x40,
		0xf7, 0x98, 0x7a, 0x2a, 0x96, 0xb1, 0xfa, 0xbb, 0xba, 0x5c, 0xb3, 0xe8,
		0xd5, 0x6c, 0x5a, 0xdd, 0xe8, 0xce, 0x0e, 0x4e, 0x03, 0xbe, 0xbc, 0xa5,
		0x15, 0x66, 0x8c, 0x9b, 0xe7, 0x63, 0x73, 0x90, 0x62, 0xdc, 0x3a, 0xfc,
		0x40, 0xe8, 0x2f, 0xdd, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x31, 0x68,
		0x20, 0xa1, 0xda, 0x07, 0x00, 0x00,
	},
		"sqlc/tmpl/fields.tmpl",
	)
}

func sqlc_tmpl_schema_tmpl() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x9c, 0x52,
		0x51, 0x6b, 0xb3, 0x30, 0x14, 0x7d, 0x36, 0xbf, 0xe2, 0x22, 0xe5, 0x43,
		0x3f, 0x3a, 0x7d, 0x2f, 0xf4, 0xc1, 0xd1, 0x74, 0x15, 0xc4, 0x8e, 0x9a,
		0x52, 0xc6, 0x18, 0xc5, 0xda, 0xb4, 0x93, 0x59, 0x75, 0x31, 0x6e, 0x0c,
		0xf1, 0xbf, 0x2f, 0x89, 0xa5, 0xba, 0xcd, 0xae, 0x65, 0x20, 0x92, 0xdc,
		0x9c, 0x73, 0xee, 0xb9, 0x27, 0xb1, 0x6d, 0x20, 0x33, 0x37, 0x80, 0xa9,
		0xeb, 0x61, 0x58, 0x39, 0x01, 0x38, 0x4b, 0x32, 0xbf, 0xc3, 0x3e, 0x5e,
		0x38, 0x04, 0x4f, 0xe0, 0x06, 0x1c, 0xff, 0x01, 0xf0, 0xc4, 0x25, 0x01,
		0x90, 0x79, 0x03, 0x5d, 0xb9, 0x9e, 0x07, 0xb7, 0x18, 0xbc, 0x79, 0x40,
		0x60, 0x35, 0xc3, 0x3e, 0xb8, 0x04, 0x44, 0x7d, 0x81, 0x4f, 0x3c, 0x94,
		0x87, 0xd1, 0x4b, 0xb8, 0xa7, 0x50, 0x55, 0x60, 0xdd, 0x1f, 0xd7, 0x75,
		0x8d, 0x50, 0x7c, 0xc8, 0x33, 0xc6, 0xc1, 0x40, 0x9a, 0xbe, 0x8f, 0xf9,
		0x73, 0xb9, 0xb1, 0xa2, 0xec, 0x60, 0x33, 0x9a, 0x64, 0x79, 0x61, 0x17,
		0xaf, 0x49, 0xa4, 0x7e, 0x3a, 0x32, 0x11, 0x12, 0x54, 0x16, 0xa6, 0x82,
		0x37, 0x58, 0x0f, 0x61, 0xc0, 0x61, 0x34, 0x06, 0x8b, 0x84, 0x9b, 0x84,
		0x16, 0x4a, 0x89, 0x7f, 0xe4, 0x4a, 0x9e, 0x67, 0x5e, 0xf6, 0x4e, 0x99,
		0x40, 0x58, 0x7e, 0x78, 0x90, 0x5d, 0xa0, 0xe0, 0xac, 0x8c, 0x38, 0x54,
		0x48, 0xfb, 0xaa, 0xb1, 0x93, 0x1a, 0x02, 0x37, 0x8d, 0x69, 0xb2, 0x55,
		0x2a, 0x9a, 0x12, 0x58, 0xe6, 0xb9, 0x14, 0xd8, 0xb5, 0x02, 0xc2, 0x83,
		0x25, 0x8e, 0x44, 0x89, 0xc8, 0x36, 0x75, 0xad, 0x28, 0x0a, 0x4e, 0xd3,
		0xad, 0x64, 0x0a, 0x07, 0xbb, 0x32, 0x8d, 0xc0, 0xe0, 0xf0, 0xbf, 0xd7,
		0x85, 0x09, 0x6e, 0x11, 0xd0, 0x84, 0x46, 0x5c, 0x7a, 0x36, 0x4c, 0xa8,
		0xae, 0xa0, 0xc8, 0x85, 0x80, 0x8a, 0x01, 0xe2, 0x74, 0x2f, 0x07, 0x60,
		0x94, 0x97, 0x2c, 0x05, 0xbd, 0x17, 0xaf, 0x5f, 0xe3, 0xa2, 0x19, 0x56,
		0x88, 0x3e, 0x3e, 0xa9, 0xb1, 0xd4, 0xbe, 0x23, 0xdd, 0x2d, 0x8b, 0xea,
		0xe5, 0xc8, 0xb4, 0x9f, 0xe9, 0x18, 0xdd, 0x18, 0x4f, 0xbd, 0x87, 0x47,
		0xdb, 0xdf, 0xe3, 0xd5, 0xcd, 0x61, 0xd3, 0xe7, 0x18, 0xa5, 0xa6, 0xd2,
		0x6c, 0xf7, 0x17, 0x6e, 0xfe, 0x2d, 0x64, 0xb0, 0x5e, 0xf7, 0xdf, 0xfc,
		0x18, 0xfe, 0xf5, 0x1e, 0x54, 0x0d, 0xad, 0xd7, 0xe6, 0x59, 0x92, 0x0c,
		0x09, 0xfd, 0xed, 0x05, 0x8d, 0x7a, 0x9e, 0x90, 0x71, 0xc6, 0xf4, 0x6f,
		0x31, 0x75, 0x42, 0x11, 0x5f, 0xbb, 0xfd, 0x0c, 0x00, 0x00, 0xff, 0xff,
		0xd3, 0x69, 0xf6, 0x10, 0xb6, 0x03, 0x00, 0x00,
	},
		"sqlc/tmpl/schema.tmpl",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"sqlc/tmpl/fields.tmpl": sqlc_tmpl_fields_tmpl,
	"sqlc/tmpl/schema.tmpl": sqlc_tmpl_schema_tmpl,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"sqlc": &_bintree_t{nil, map[string]*_bintree_t{
		"tmpl": &_bintree_t{nil, map[string]*_bintree_t{
			"fields.tmpl": &_bintree_t{sqlc_tmpl_fields_tmpl, map[string]*_bintree_t{
			}},
			"schema.tmpl": &_bintree_t{sqlc_tmpl_schema_tmpl, map[string]*_bintree_t{
			}},
		}},
	}},
}}
