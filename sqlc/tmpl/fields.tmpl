// THIS FILE WAS AUTOGENERATED - ANY EDITS TO THIS WILL BE LOST WHEN IT IS REGENERATED

{{ $preds := .predicates }}
{{ $funcs := .functions }}

package sqlc

import (
	"time"
	"github.com/relops/sqlc/meta"
)

type InsertSetStep interface {
	{{ range $_, $t := .types }}
 	Set{{ $t.Prefix }}({{ $t.Prefix }}Field, {{ $t.Literal }}) InsertSetMoreStep
 	{{ end }}
}

type UpdateSetStep interface {
	{{ range $_, $t := .types }}
 	Set{{ $t.Prefix }}({{ $t.Prefix }}Field, {{ $t.Literal }}) UpdateSetMoreStep
 	{{ end }}
}

{{ range $_, $t := .types }}
func (i *insert) Set{{ $t.Prefix }}(f {{ $t.Prefix }}Field, v {{ $t.Literal }}) InsertSetMoreStep {
	return i.set(f,v)
}
{{ end }}

{{ range $_, $t := .types }}
func (u *update) Set{{ $t.Prefix }}(f {{ $t.Prefix }}Field, v {{ $t.Literal }}) UpdateSetMoreStep {
	return u.set(f,v)
}
{{ end }}

/////

type Reflectable interface {
{{ range $_, $t := .types }}
	{{ $t.Prefix }}Field(name string) {{ $t.Prefix }}Field
{{ end }}
}

type Functional interface {
{{ range $_, $f := $funcs }}
	{{ $f.Name }}() Field
{{ end }}
}

{{ range $_, $t := .types }}
func (s *selection) {{ $t.Prefix }}Field(name string) {{ $t.Prefix }}Field {
	return &{{ toLower $t.Prefix }}Field{name: name}
}
func (t table) {{ $t.Prefix }}Field(name string) {{ $t.Prefix }}Field {
	return &{{ toLower $t.Prefix }}Field{name: name, table: t}
}
{{ end }}

/////

{{ range $_, $t := .types }}

type {{ toLower $t.Prefix }}Field struct {
	name string
	table Selectable
	fun meta.Function
	alias string
}

type {{ $t.Prefix }}Field interface {
	TableField
	{{ range $_, $p := $preds }}
	{{ $p.FieldFunction }}(value {{ $t.Literal }}) Condition
	{{ $p.JoinFunction }}(value {{ $t.Prefix }}Field) JoinCondition
	{{ end }}
}


func (c *{{ toLower $t.Prefix }}Field) Function() meta.Function {
	return c.fun
}

func (c *{{ toLower $t.Prefix }}Field) fct(f meta.Function) Field {
	return &{{ toLower $t.Prefix }}Field{
		name:  c.name,
		table: c.table,
		fun:   f,
	}
}

func (c *{{ toLower $t.Prefix }}Field) As(alias string) Field {
	return &{{ toLower $t.Prefix }}Field{name: c.name, table: c.table, fun: c.fun, alias: alias}
}

func (c *{{ toLower $t.Prefix }}Field) Alias() string {
	return c.alias
}

func (c *{{ toLower $t.Prefix }}Field) MaybeAlias() string {
	if c.alias == "" {
		return c.name
	} else {
		return c.alias
	}
}

func (c *{{ toLower $t.Prefix }}Field) Name() string {
	return c.name
}

func (c *{{ toLower $t.Prefix }}Field) Parent() Selectable {
	return c.table
}

// --

{{ range $_, $p := $preds }}

func (c *{{ toLower $t.Prefix }}Field) {{ $p.FieldFunction }}(pred {{ $t.Literal }}) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: {{ $p.Predicate }}}
}

func (c *{{ toLower $t.Prefix }}Field) {{ $p.JoinFunction }}(pred {{ $t.Prefix }}Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: {{ $p.Predicate }}}
}

{{ end }}

// --

func {{ $t.Prefix }}(table Selectable, name string) {{ $t.Prefix }}Field {
	return &{{ toLower $t.Prefix }}Field{name: name, table:table}
}

//////

{{ range $_, $f := $funcs }}
func (c *{{ toLower $t.Prefix }}Field) {{ $f.Name }}() Field {	
	return c.fct(meta.{{ $f.Name }})
}
{{ end }}

{{ end }}
