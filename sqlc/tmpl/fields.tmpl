// THIS FILE WAS AUTOGENERATED - ANY EDITS TO THIS WILL BE LOST WHEN IT IS REGENERATED

package sqlc

import (
	"time"
)

type InsertSetStep interface {
	{{ range $_, $t := .types }}
 	Set{{ $t.Prefix }}({{ $t.Prefix }}Field, {{ $t.Literal }}) InsertSetMoreStep
 	{{ end }}
}

type UpdateSetStep interface {
	{{ range $_, $t := .types }}
 	Set{{ $t.Prefix }}({{ $t.Prefix }}Field, {{ $t.Literal }}) UpdateSetMoreStep
 	{{ end }}
}

{{ range $_, $t := .types }}
func (i *insert) Set{{ $t.Prefix }}(f {{ $t.Prefix }}Field, v {{ $t.Literal }}) InsertSetMoreStep {
	return i.set(f,v)
}
{{ end }}

{{ range $_, $t := .types }}
func (u *update) Set{{ $t.Prefix }}(f {{ $t.Prefix }}Field, v {{ $t.Literal }}) UpdateSetMoreStep {
	return u.set(f,v)
}
{{ end }}


{{ range $_, $t := .types }}

type {{ toLower $t.Prefix }}Field struct {
	name string
	table TableLike
	fun Function
	alias string
}

type {{ $t.Prefix }}Field interface {
	TableField
	Eq(value {{ $t.Literal }}) Condition
	IsEq(value {{ $t.Prefix }}Field) JoinCondition
}


func (c *{{ toLower $t.Prefix }}Field) Function() Function {
	return c.fun
}

func (c *{{ toLower $t.Prefix }}Field) fct(f Function) Field {
	return &{{ toLower $t.Prefix }}Field{
		name:  c.name,
		table: c.table,
		fun:   f,
	}
}

func (c *{{ toLower $t.Prefix }}Field) As(alias string) Field {
	c.alias = alias
	return c
}

func (c *{{ toLower $t.Prefix }}Field) Alias() string {
	return c.alias
}

func (c *{{ toLower $t.Prefix }}Field) Name() string {
	return c.name
}

func (c *{{ toLower $t.Prefix }}Field) Table() string {
	return c.table.Name()
}

func (c *{{ toLower $t.Prefix }}Field) Eq(pred {{ $t.Literal }}) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}}
}

func (c *{{ toLower $t.Prefix }}Field) IsEq(pred {{ $t.Prefix }}Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: EqPredicate}
}

func {{ $t.Prefix }}(table TableLike, name string) {{ $t.Prefix }}Field {
	return &{{ toLower $t.Prefix }}Field{name: name, table:table}
}

//////

func (c *{{ toLower $t.Prefix }}Field) Avg() Field {	
	return c.fct(Avg)
}

func (c *{{ toLower $t.Prefix }}Field) Max() Field {	
	return c.fct(Max)
}

func (c *{{ toLower $t.Prefix }}Field) Min() Field {
	return c.fct(Min)
}

{{ end }}